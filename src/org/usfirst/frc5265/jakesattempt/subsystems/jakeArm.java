// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5265.jakesattempt.subsystems;

import org.usfirst.frc5265.jakesattempt.RobotMap;
import org.usfirst.frc5265.jakesattempt.commands.*;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class jakeArm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	//public static final boolean brushState = true;
	//SmartDashboard.putBoolean("brushState",brushState);
	public static final boolean brushState = true;
    private final SpeedController brush = RobotMap.jakeArmbrush;
    private final SpeedController leftWheel = RobotMap.jakeArmleftWheel;
    private final SpeedController rightWheel = RobotMap.jakeArmrightWheel;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	SmartDashboard.putBoolean("brushState",brushState);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public static boolean BrushStateToggle() {
 		boolean BrushState = SmartDashboard.getBoolean("brushState");
     	BrushState = !BrushState;
     	SmartDashboard.putBoolean("brushState",BrushState);	
     	return BrushState;
    }
    public void intakeOn(){
    	brush.set(.5);   
    	leftWheel.set(.5);
    	rightWheel.set(-.5);
    }
    public void intakeOff(){
    	brush.set(0);   
    	leftWheel.set(.0);
    	rightWheel.set(.0);
    }        
}

